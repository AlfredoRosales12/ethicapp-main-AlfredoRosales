"use strict";

var BASE_APP = "https://saduewa.dcc.uchile.cl:8888/Readings/";

var app = angular.module("Role", ["ngSanitize", "ui.bootstrap", 'ui.tree', 'btford.socket-io', "timer", "ui-notification", "luegg.directives"]);

app.factory("$socket", ["socketFactory", function (socketFactory) {
    return socketFactory();
}]);

app.controller("RoleController", ["$scope", "$http", "$timeout", "$socket", "Notification", "$sce", "$uibModal", function ($scope, $http, $timeout, $socket, Notification, $sce, $uibModal) {
    var self = $scope;

    self.iteration = 1;
    self.myUid = -1;
    self.documents = [];
    self.showDoc = true;
    self.selectedDocument = 0;
    self.finished = false;
    self.sesId = -1;
    self.chatExp = true;

    self.stages = [];
    self.currentStageId = 0;
    self.currentStage = null;

    self.selectedStage = null;

    self.actors = [];
    self.sel = [];

    self.actorsPrev = [];
    self.selPrev = [];

    self.selections = [];

    self.ansIter1 = {};
    self.ansIter2 = {};

    self.chatMsgs = {};
    self.chatmsg = "";
    self.chatmsgreply = null;

    self.tmId = -1;
    self.userAnon = {};

    self.lang = "spanish";
    self.selectedActor = null;
    self.selectedActorPrev = null;

    self.init = function () {
        self.getSesInfo();
        $socket.on("stateChange", function (data) {
            console.log("SOCKET.IO", data);
            if (data.ses == self.sesId) {
                window.location.reload();
            }
        });
        $socket.on("chatMsg", function (data) {
            console.log("SOCKET.IO", data);
            if (data.ses == self.sesId && data.tmid == self.tmId && self.iteration == 3) {
                updateChat();
            }
        });
        // $socket.on("diffReceived", (data) => {
        //     console.log("SOCKET.IO", data);
        //     if(data.ses == self.sesId){
        //         self.openDetails(data);
        //     }
        // });
        self.getMe();
    };

    self.getSesInfo = function () {
        $http({ url: "get-ses-info", method: "post" }).success(function (data) {
            self.iteration = data.iteration + 1;
            self.myUid = data.uid;
            self.sesName = data.name;
            self.sesId = data.id;
            self.sesSTime = data.stime;
            self.sesDescr = data.descr;
            self.currentStageId = data.current_stage;
            // self.useConfidence = (data.options != null && data.options.includes("C"));
            // if (self.iteration > 1) {
            //     $http({url: "get-team-diff-selection", method: "post", data: {iteration: 1}}).success((data) => {
            //         data.forEach((ans) => {
            //             self.ansIter1[ans.did] = self.ansIter1[ans.did] || [];
            //             self.ansIter1[ans.did].push({select: ans.sel, comment: ans.comment, uid: ans.uid});
            //         });
            //     });
            // }
            // if (self.iteration > 2) {
            //     $http({url: "get-team-diff-selection", method: "post", data: {iteration: 2}}).success((data) => {
            //         data.forEach((ans) => {
            //             self.ansIter2[ans.did] = self.ansIter2[ans.did] || [];
            //             self.ansIter2[ans.did].push({select: ans.sel, comment: ans.comment, uid: ans.uid});
            //         });
            //     });
            // }
            if (self.iteration >= 2) {
                self.finished = true;
            }
            if (self.currentStageId != null) {
                self.loadDocuments();
                self.loadStageData();
                // self.loadDifferentials();
                // $http.post("get-anon-team").success((data) => {
                //     let alph = ["A", "B", "C", "D", "E"];
                //     data.forEach((u,i) => {
                //         self.userAnon[u.id] = alph[i];
                //         self.tmId = u.tmid;
                //     });
                // });
            }
        });
    };

    var updateChat = function updateChat(count) {
        $http.post("get-chat-msgs").success(function (data) {
            self.chatMsgs = {};
            self.dfs.forEach(function (e) {
                e.c = 0;
            });
            data.forEach(function (msg) {
                var df = self.dfs.find(function (e) {
                    return e.id == msg.did;
                });
                df.c = df.c ? df.c + 1 : 1;
                if (count || df.id == self.dfs[self.selectedDF].id) df.cr = df.c;
                if (msg.parent_id) msg.parent = data.find(function (e) {
                    return e.id == msg.parent_id;
                });
                self.chatMsgs[msg.did] = self.chatMsgs[msg.did] || [];
                self.chatMsgs[msg.did].push(msg);
            });
        });
    };

    self.getMe = function () {
        $http.post("get-my-name").success(function (data) {
            self.lang = data.lang;
            self.updateLang(self.lang);
        });
    };

    self.selectActor = function (i) {
        self.selectedActor = i;
    };

    self.selectActorView = function (i) {
        self.selectedActorPrev = i;
    };

    self.getPlaceholder = function () {
        var a = self.actors[self.selectedActor];
        if (self.selectedActor == null || a == null) {
            return "Seleccione un rol";
        } else if (a.jorder) {
            return "Escribe tu justificación para el ORDEN EN QUE HAS UBICADO a " + a.name;
        } else {
            return "Escribe tu justificación SOBRE EL ROL de " + a.name;
        }
    };

    /*self.updateTeam = () => {
        $http({url: "get-team", method: "post"}).success((data) => {
            self.team = {};
            self.teamstr = data.map(e => e.name).join(", ");
            data.forEach((tm) => {
                self.team[tm.id] = tm.name;
            });
            if (data.length > 0) {
                self.teamId = data[0].tmid;
                self.teamProgress = data[0].progress;
                if (self.iteration == 3)
                    self.selectQuestion(self.teamProgress);
            }
        });
    };*/

    self.loadDocuments = function () {
        $http({ url: "get-documents", method: "post" }).success(function (data) {
            self.documents = data;
        });
    };

    self.loadStageData = function () {
        $http.post("get-stages", {}).success(function (data) {
            self.stages = data;
            self.currentStage = self.stages.find(function (e) {
                return e.id == self.currentStageId;
            });
        });
        if (self.currentStageId != null) {
            $http.post("get-actors", { stageid: self.currentStageId }).success(function (data) {
                self.actors = data;
                if (self.sel.length == self.actors.length) {
                    self.populateActors();
                }
            });
            $http.post("get-my-actor-sel", { stageid: self.currentStageId }).success(function (data) {
                self.sel = data;
                if (self.sel.length == self.actors.length) {
                    self.populateActors();
                }
            });
        }
    };

    self.populateActors = function () {
        var acts = [];
        self.sel.forEach(function (s) {
            var a = self.actors.find(function (e) {
                return e.id == s.actorid;
            });
            a.comment = s.description;
            a.sent = s.description != "" && s.description != null;
            acts.push(a);
        });
        self.actors = acts;
    };

    self.populateActorsPrev = function () {
        var acts = [];
        self.selPrev.forEach(function (s) {
            var a = self.actorsPrev.find(function (e) {
                return e.id == s.actorid;
            });
            a.comment = s.description;
            a.sent = s.description != "" && s.description != null;
            acts.push(a);
        });
        self.actorsPrev = acts;
    };

    // self.loadDifferentials = () => {
    //     $http({url: "get-differentials", method: "post"}).success((data) => {
    //         self.dfs = data;
    //         console.log(self.dfs);
    //         self.loadDiffSelection();
    //         updateChat(true);
    //     });
    // };
    //
    // self.loadDiffSelection = () => {
    //     let postdata = {
    //         iteration: self.iteration
    //     };
    //     $http.post("get-diff-selection", postdata).success((data) => {
    //         data.forEach(d => {
    //             let df = self.dfs.find(e => d.did == e.id);
    //             df.select = d.sel;
    //             df.comment = d.comment;
    //         });
    //     });
    // };

    self.selectDocument = function (i) {
        self.selectedDocument = i;
        self.showDoc = true;
    };

    self.selectStage = function (i) {
        if (self.stages[self.selectedStage] && self.stages[self.selectedStage].dirty) {
            notify("Error", "Debe completar el diferencial antes de cambiar");
            return;
        }
        self.selectedStage = i;
        self.stages[self.selectedStage].cr = self.stages[self.selectedStage].c;
        self.showDoc = false;
        self.chatmsg = "";
        $http.post("get-actors", { stageid: self.stages[self.selectedStage].id }).success(function (data) {
            self.actorsPrev = data;
            if (self.selPrev.length == self.actorsPrev.length) {
                self.populateActorsPrev();
            }
        });
        $http.post("get-my-actor-sel", { stageid: self.stages[self.selectedStage].id }).success(function (data) {
            self.selPrev = data;
            if (self.selPrev.length == self.actorsPrev.length) {
                self.populateActorsPrev();
            }
        });
    };

    self.sendActorSel = function () {
        self.actors.forEach(function (a, i) {
            var postdata = {
                orden: i + 1,
                description: a.comment || "",
                actorid: a.id,
                stageid: self.currentStageId
            };
            console.log(postdata);
            $http.post("send-actor-selection", postdata).success(function (data) {
                a.dirty = false;
                a.sent = !a.justified || a.comment != null && a.comment != "";
            });
        });
        self.selectedActor = null;
    };

    // self.finishState = () => {
    //     if(self.finished){
    //         return;
    //     }
    //     if(self.iteration <= 3) {
    //         if (self.dfs.some(e => e.id == null)) {
    //             notify("Error", "Falta responder algunos diferenciales semánticos");
    //             return;
    //         }
    //     }
    //     let confirm = window.confirm("¿Esta seguro que desea terminar la actividad?\nEsto implica no volver a poder editar sus respuestas");
    //     if(confirm) {
    //         let postdata = {status: self.iteration + 2};
    //         $http({url: "record-finish", method: "post", data: postdata}).success((data) => {
    //             self.hasFinished = true;
    //             self.finished = true;
    //             console.log("FINISH");
    //             //if(self.iteration == 3)
    //             //    self.updateSignal();
    //         });
    //     }
    // };

    self.sendChatMsg = function () {
        var postdata = {
            did: self.dfs[self.selectedDF].id,
            content: self.chatmsg,
            tmid: self.tmId,
            parent_id: self.chatmsgreply
        };
        $http.post("add-chat-msg", postdata).success(function (data) {
            self.chatmsg = "";
            self.chatmsgreply = null;
        });
    };

    self.getDocURL = function () {
        return $sce.trustAsResourceUrl("https://docs.google.com/viewer?url=" + BASE_APP + self.documents[self.selectedDocument].path + "&embedded=true");
    };

    // self.dfSelect = (i) => {
    //     if(self.finished || self.hasFinished)
    //         return;
    //     self.dfs[self.selectedDF].select = i;
    //     self.dfs[self.selectedDF].dirty = true;
    // };

    var notify = function notify(title, message, closable) {
        $uibModal.open({
            template: '<div><div class="modal-header"><h4>' + title + '</h4></div><div class="modal-body"><p>' + message + '</p></div></div>'
        });
    };

    self.openComment = function (com) {
        notify("Comentario", com);
    };

    self.showInfo = function () {
        notify("Factor Detonante", self.sesDescr, false);
    };

    self.updateLang = function (lang) {
        $http.get("data/" + lang + ".json").success(function (data) {
            window.DIC = data;
        });
    };

    self.changeLang = function () {
        self.lang = self.lang == "english" ? "spanish" : "english";
        self.updateLang(self.lang);
    };

    self.openDetails = function (_data) {
        $uibModal.open({
            templateUrl: "templ/direct-content.html",
            controller: "DirectContentController",
            controllerAs: "vm",
            scope: self,
            resolve: {
                data: function data() {
                    return _data;
                }
            }
        });
    };

    self.setReply = function (msg) {
        self.chatmsgreply = msg == null ? null : msg.id;
        document.getElementById("chat-input").focus();
    };

    self.init();
}]);

app.controller("DirectContentController", ["$scope", "$uibModalInstance", "data", function ($scope, $uibModalInstance, data) {
    var vm = this;
    vm.data = data;
    vm.data.title = "Diferencial recibido";

    setTimeout(function () {
        console.log(vm);
        document.getElementById("modal-content").innerHTML = vm.data.content;
    }, 500);

    vm.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
}]);

window.DIC = null;
window.warnDIC = {};

app.filter('lang', function () {
    filt.$stateful = true;
    return filt;

    function filt(label) {
        if (window.DIC == null) return;
        if (window.DIC[label]) return window.DIC[label];
        if (!window.warnDIC[label]) {
            console.warn("Cannot find translation for ", label);
            window.warnDIC[label] = true;
        }
        return label;
    }
});

var indexById = function indexById(arr, id) {
    return arr.findIndex(function (e) {
        return e.id == id;
    });
};

app.directive('bindHtmlCompile', ['$compile', function ($compile) {
    return {
        restrict: 'A',
        link: function link(scope, element, attrs) {
            scope.$watch(function () {
                return scope.$eval(attrs.bindHtmlCompile);
            }, function (value) {
                element.html(value && value.toString());
                var compileScope = scope;
                if (attrs.bindHtmlScope) {
                    compileScope = scope.$eval(attrs.bindHtmlScope);
                }
                $compile(element.contents())(compileScope);
            });
        }
    };
}]);

app.filter('linkfy', function () {
    var replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
    var replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
    var replacePattern3 = /(\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6})/gim;

    return function (text, target, otherProp) {
        if (text == null) return text;
        angular.forEach(text.match(replacePattern1), function (url) {
            text = text.replace(replacePattern1, "<a href=\"$1\" target=\"_blank\">$1</a>");
        });
        angular.forEach(text.match(replacePattern2), function (url) {
            text = text.replace(replacePattern2, "$1<a href=\"http://$2\" target=\"_blank\">$2</a>");
        });
        angular.forEach(text.match(replacePattern3), function (url) {
            text = text.replace(replacePattern3, "<a href=\"mailto:$1\">$1</a>");
        });
        // console.log("HOLA");
        return text;
    };
});
